#!/bin/bash

echo "üöÄ Starting WiFi AP inside Docker container..."

# ‚úÖ Extract the Gateway IP from dnsmasq.conf
GATEWAY_IP=$(grep -oP 'dhcp-option=3,\K[\d.]+' /etc/dnsmasq.conf)

# ‚úÖ If no IP is found, set a default value
if [[ -z "$GATEWAY_IP" ]]; then
    GATEWAY_IP="192.168.4.1"
    echo "‚ö†Ô∏è No gateway IP found in dnsmasq.conf. Using default: $GATEWAY_IP"
else
    echo "‚úÖ Gateway IP detected from dnsmasq.conf: $GATEWAY_IP"
fi

# ‚úÖ Cleanup function (runs on exit)
cleanup() {
    echo "üõë Cleaning up wlan0 before container stops..."
    killall hostapd dnsmasq 2>/dev/null
    sleep 2
    ip link set wlan0 down
    ip addr flush dev wlan0
    echo "‚úÖ wlan0 cleaned up. Exiting."
    exit 0
}

# ‚úÖ Trap SIGTERM to run cleanup before stopping
trap cleanup SIGTERM

# ‚úÖ Ensure wlan0 is DOWN first (prevents conflicts)
echo "üîÑ Resetting wlan0..."
ip link set wlan0 down
sleep 2

# ‚úÖ Set up wlan0 with the dynamic IP
echo "‚úÖ Enabling wlan0..."
ip link set wlan0 up
sleep 2
ip addr flush dev wlan0  # Ensure no stale IPs
ip addr add "$GATEWAY_IP/24" dev wlan0

# ‚úÖ Wait until wlan0 is UP
TRIES=0
while ! ip link show wlan0 | grep -q "state UP"; do
    echo "‚è≥ Waiting for wlan0 to be UP..."
    sleep 1
    ((TRIES++))
    if [ $TRIES -gt 10 ]; then
        echo "‚ùå wlan0 failed to come UP. Exiting..."
        exit 1
    fi
done

# ‚úÖ Start hostapd
echo "üöÄ Starting hostapd..."
hostapd -B /etc/hostapd/hostapd.conf
sleep 3

# ‚úÖ Verify hostapd is running
if ! pidof hostapd > /dev/null; then
    echo "‚ùå Failed to start hostapd! Exiting..."
    exit 1
fi

# ‚úÖ Wait for `wlan0` to be fully functional
sleep 5  # Helps prevent race conditions

# ‚úÖ Start dnsmasq (DHCP server)
echo "üöÄ Starting dnsmasq..."
dnsmasq -C /etc/dnsmasq.conf -d &
sleep 2

# ‚úÖ Verify dnsmasq is running
if ! pidof dnsmasq > /dev/null; then
    echo "‚ùå Failed to start dnsmasq! Exiting..."
    exit 1
fi

echo "üéâ WiFi AP is UP and running with IP: $GATEWAY_IP"

# ‚úÖ Monitor for Disconnections and Force Renew DHCP
while true; do
    if ! ip link show wlan0 | grep -q "state UP"; then
        echo "‚ö†Ô∏è wlan0 went DOWN. Restarting interface..."
        ip link set wlan0 down
        sleep 2
        ip link set wlan0 up
        sleep 5
    fi
    sleep 5
done
